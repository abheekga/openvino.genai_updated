// Copyright (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "openvino/genai/perf_metrics.hpp"
#include "openvino/genai/visibility.hpp"


namespace ov::genai {

/**
 * @brief Performance metrics for each generate call of Speculative Decoding Pipeline.
 * It is extended version of PerfMetrics.
 * 
 * @param get_ttst Returns the mean and standard deviation of TTST(Time to the second token).
 * @param get_latency Returns the mean and standard deviation of the latency(avg_latency).
 *
 * Cached mean and standard deviations.
 * @param ttst Mean and standard deviation of Time to the Second Token (TTST) in milliseconds.
 * The second token is presented separately as it shows more time than the subsequent tokens for both the main and draft models.
 * @param avg_latency Mean and standard deviation of the latency from the third token in milliseconds per inference, which includs also prev and post processing.
 * The latency of first and second tokens can be obtained with methods get_ttft() and get_ttst().
 * First and second tokens take longer than next tokens, so let's exclude it from total statistic.
 * 
 * Additional potins.
 * TPOT is calculated from the third token.
 * To get number of iterations, you can use value from raw performance metrics raw_metrics.m_durations.size().
 */
struct OPENVINO_GENAI_EXPORTS SDPerfMetrics : public ov::genai::ExtendedPerfMetrics {
    ov::genai::MeanStdPair ttst;  // Time of the generation of the second token (in ms).
    ov::genai::MeanStdPair avg_latency;  // Latency from the third token (in ms), first and second token time is presented separately as ttft and ttst.

    ov::genai::MeanStdPair get_ttst();
    ov::genai::MeanStdPair get_latency();

    void evaluate_statistics(std::optional<TimePoint> start_time = std::nullopt) override;
};

/**
 * @brief Performance metrics for main and draft model of Speculative Decoding Pipeline.
 *
 * SDPerModelsPerfMetrics includes metrics for main model and draft model.
 * @param main_model_metrics A structure of SDPerfMetrics type that holds performance metrics for mian model.
 * @param draft_model_metrics A structure of SDPerfMetrics type that holds performance metrics for draft model.
 * @param get_num_accepted_tokens Returns the number of tokens generated by the draft model and accepted by the main model. 
 * 
 * Cached mean and standard deviations.
 * @param num_accepted_tokens Number of tokens tokens generated by the draft model and accepted by the main model.
 * This value is not equal to the number of generated tokens, since the main model generates one own tokens on each inference.
 * Thus, number of generated tokens = SUM(number of accepted tokens(generated by draft model and accepted by main model) + 1 token(generated by main model))
 * 
 */
struct OPENVINO_GENAI_EXPORTS SDPerModelsPerfMetrics : public ov::genai::SDPerfMetrics {
    ov::genai::SDPerfMetrics main_model_metrics;
    ov::genai::SDPerfMetrics draft_model_metrics;
    size_t num_accepted_tokens; // num tokens, which was accepted by main model.

    SDPerModelsPerfMetrics();

    size_t get_num_accepted_tokens();

    void evaluate_statistics(std::optional<TimePoint> start_time = std::nullopt) override;
};

}