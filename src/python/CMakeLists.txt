# Copyright (C) 2018-2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

include(FetchContent)

FetchContent_Declare(
    pybind11
    URL https://github.com/pybind/pybind11/archive/refs/tags/v2.13.5.tar.gz
    URL_HASH SHA256=b1e209c42b3a9ed74da3e0b25a4f4cd478d89d5efbb48f04b277df427faf6252
)
FetchContent_GetProperties(pybind11)
# search for FindPython3.cmake instead of legacy modules
set(PYBIND11_FINDPYTHON ON)

if(NOT pybind11_POPULATED)
    FetchContent_Populate(pybind11)
    add_subdirectory(${pybind11_SOURCE_DIR} ${pybind11_BINARY_DIR})
endif()

file(GLOB python_sources "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")

set(TARGET_NAME py_openvino_genai)
pybind11_add_module(${TARGET_NAME} ${python_sources})

target_link_libraries(${TARGET_NAME} PRIVATE openvino::genai)
target_include_directories(${TARGET_NAME} PRIVATE "${OpenVINOGenAI_SOURCE_DIR}/src/cpp/src") # for tokenizers_path.hpp
set_target_properties(${TARGET_NAME} PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "$<1:${CMAKE_BINARY_DIR}/openvino_genai/>"
    LIBRARY_OUTPUT_DIRECTORY "$<1:${CMAKE_BINARY_DIR}/openvino_genai/>"
)
file(COPY "${CMAKE_CURRENT_SOURCE_DIR}/openvino_genai/__init__.py" DESTINATION "${CMAKE_BINARY_DIR}/openvino_genai/")

configure_file("${OpenVINOGenAI_SOURCE_DIR}/cmake/templates/__version__.py.in"
               "${CMAKE_BINARY_DIR}/openvino_genai/__version__.py" @ONLY)

if(OpenVINODeveloperPackage_DIR)
    # TODO: commit changes separately
    # ov_add_clang_format_target(${TARGET_NAME}_clang FOR_TARGETS ${TARGET_NAME})
endif()

if(DEFINED PY_BUILD_CMAKE_PACKAGE_NAME)
    # RPATH for wheel is mandatory to find openvino_genai library. It
    # must be forced because GenAI may be built with OpenVINO targeting
    # archive. Such OpenVINO configurations sets
    # CMAKE_SKIP_INSTALL_RPATH to ON because it relies on setupvars.sh.
    set(CMAKE_SKIP_INSTALL_RPATH OFF)
endif()
# setting RPATH / LC_RPATH depending on platform
if(LINUX)
    # to find libopenvino_genai.so in the same folder
    set(rpaths "$ORIGIN")
elseif(APPLE)
    # to find libopenvino_genai.dylib in the same folder
    set(rpaths "@loader_path")
    if(DEFINED PY_BUILD_CMAKE_PACKAGE_NAME)
        # in case we build pip package, we need to refer to libopenvino.dylib from 'openvino' package
        list(APPEND rpaths "@loader_path/../openvino/libs")
    endif()
endif()

if(rpaths)
    set_target_properties(${TARGET_NAME} PROPERTIES INSTALL_RPATH "${rpaths}")
endif()

install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/openvino_genai/__init__.py"
              "${CMAKE_BINARY_DIR}/openvino_genai/__version__.py"
        DESTINATION python/openvino_genai
        COMPONENT pygenai_${Python3_VERSION_MAJOR}_${Python3_VERSION_MINOR})
install(TARGETS ${TARGET_NAME}
        LIBRARY DESTINATION python/openvino_genai
        COMPONENT pygenai_${Python3_VERSION_MAJOR}_${Python3_VERSION_MINOR})

install(FILES "${CMAKE_BINARY_DIR}/openvino_genai/__version__.py"
        DESTINATION openvino_genai
        COMPONENT wheel_genai
        EXCLUDE_FROM_ALL)

install(FILES "${OpenVINOGenAI_SOURCE_DIR}/LICENSE"
              "${OpenVINOGenAI_SOURCE_DIR}/third-party-programs.txt"
              "${OpenVINOGenAI_SOURCE_DIR}/SECURITY.md"
        DESTINATION "${PY_BUILD_CMAKE_PACKAGE_NAME}-${PY_BUILD_CMAKE_PACKAGE_VERSION}.dist-info"
        COMPONENT wheel_genai
        EXCLUDE_FROM_ALL)

# wheel_genai component is used for wheel generation in pyproject.toml.
# Exclude wheel_genai from normal packaging because there's pygenai_X_Y component for that.
install(TARGETS openvino_genai ${TARGET_NAME}
        LIBRARY DESTINATION openvino_genai COMPONENT wheel_genai EXCLUDE_FROM_ALL
        RUNTIME DESTINATION openvino_genai COMPONENT wheel_genai EXCLUDE_FROM_ALL)

# Generate or check .pyi stub files generated by pybind11-stub

if(OpenVINODeveloperPackage_DIR)
    set(requirements_file "${OpenVINOGenAI_SOURCE_DIR}/requirements-build.txt")

    ov_check_pip_package(REQUIREMENT "pybind11-stubgen==2.5.1"
                         RESULT_VAR pybind11_stubgen_AVAILABLE
                         WARNING_MESSAGE "Please, install this package if you plan to develop Python OpenVINO GenAI API"
                         MESSAGE_MODE WARNING)

    if(pybind11_stubgen_AVAILABLE)
        if(DEFINED ENV{CI} OR DEFINED ENV{TF_BUILD} OR DEFINED ENV{JENKINS_URL})
            set(ci_run ON)
        endif()
        set(ci_run ON)

        if(ci_run)
            set(stub_files_location "${OpenVINOGenAI_BINARY_DIR}/src/python")
        else()
            set(stub_files_location "${OpenVINOGenAI_SOURCE_DIR}/src/python")
        endif()
        set(output_files "${stub_files_location}/openvino_genai/py_openvino_genai.pyi"
                         "${stub_files_location}/openvino_genai/__init__.pyi")

        find_host_program(pybind11_stubgen NAMES pybind11-stubgen REQUIRED)

        add_custom_command(OUTPUT ${output_files}
            COMMAND "${CMAKE_COMMAND}" -E env PYTHONPATH=${CMAKE_BINARY_DIR}
                "${pybind11_stubgen}" --output-dir "${stub_files_location}" openvino_genai
            DEPENDS
                ${python_sources}
                "${CMAKE_CURRENT_SOURCE_DIR}/openvino_genai/__init__.py"
            COMMENT "[pybind11-stubgen] Generate .pyi files"
            VERBATIM)

        add_custom_target(${TARGET_NAME}_stub ALL DEPENDS ${output_files})
        add_dependencies(${TARGET_NAME}_stub ${TARGET_NAME})

        # perform comparison of generated files with committed ones
        if(ci_run)
            file(GLOB_RECURSE pyi_files "${stub_files_location}/*.pyi")
            foreach(pyi_file IN LISTS pyi_files)
                string(REPLACE "${stub_files_location}" "${OpenVINOGenAI_SOURCE_DIR}/src/python" commited_pyi_file "${pyi_file}")
                if(NOT EXISTS "${commited_pyi_file}")
                    message(FATAL_ERROR "${commited_pyi_file} does not exists. Please, install pybind11-stubgen and generate .pyi files")
                else()
                    execute_process(COMMAND "${CMAKE_COMMAND}" -E compare_files "${pyi_file}" "${commited_pyi_file}" 
                        OUTPUT_VARIABLE lfs_output
                        RESULT_VARIABLE lfs_var
                        ERROR_VARIABLE error_var)
                    if(NOT lfs_var EQUAL 0)
                        message(FATAL_ERROR "${lfs_var} - ${lfs_output} ${error_var}")
                    endif()
                endif()
            endforeach()
        endif()
    endif()
endif()
