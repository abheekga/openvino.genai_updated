name: Linux (Ubuntu 22.04, Python 3.11)
on:
  workflow_dispatch:
  pull_request:
  merge_group:
  push:
    branches:
      - master
      - 'releases/**'

permissions: read-all # Required by https://github.com/ossf/scorecard/blob/e23b8ad91fd6a64a0a971ca4fc0a4d1650725615/docs/checks.md#token-permissions

concurrency:
  # github.ref is not unique in post-commit
  group: ${{ github.event_name == 'push' && github.run_id || github.ref }}-linux
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  OV_BRANCH: ${{ github.base_ref || github.event.merge_group.base_ref || github.ref }}
  CMAKE_CXX_COMPILER_LAUNCHER: sccache
  CMAKE_C_COMPILER_LAUNCHER: sccache
  SCCACHE_IGNORE_SERVER_IO_ERROR: 1
  SCCACHE_SERVER_PORT: 35555
  SCCACHE_CACHE_SIZE: 30G
  SCCACHE_AZURE_KEY_PREFIX: genai/ubuntu/22_04/x64
  GENAI_ARCHIVE_NAME: genai.tar.gz
  GENAI_SAMPLES_NAME: genai_samples.tar.gz

jobs:
  openvino_download:
    name: Download OpenVINO
    outputs:
      status: ${{ steps.openvino_download.outcome }}
      ov_artifact_name: ${{ steps.openvino_download.outputs.ov_artifact_name }}
      ov_wheel_source: ${{ steps.openvino_download.outputs.ov_wheel_source }}
      ov_version: ${{ steps.openvino_download.outputs.ov_version }}
      docker_tag: ${{ steps.get_docker_tag.outputs.docker_tag }}
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores-16gb
    container:
      image: 'openvinogithubactions.azurecr.io/openvino_provider:0.1.0'
      volumes: 
        - /mount:/mount
        - ${{ github.workspace }}:${{ github.workspace }}

    steps:
    - uses: openvinotoolkit/openvino/.github/actions/openvino_provider@master
      id: openvino_download
      with:
        platform: ubuntu22
        commit_packages_to_provide: wheels
        revision: latest_available_commit

    - name: Clone docker tag from OpenVINO repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: 'openvinotoolkit/openvino'
        path: 'openvino'
        ref: ${{ env.OV_BRANCH }}
        sparse-checkout: |
          .github/dockerfiles/docker_tag

    - name: Save docker tag to output
      id: get_docker_tag
      run: |
        docker_tag=$(cat openvino/.github/dockerfiles/docker_tag)
        echo "docker_tag=$docker_tag" >> $GITHUB_OUTPUT

  genai_build_cmake:
    name: Build Archive - ${{ matrix.build-type }}
    strategy:
      fail-fast: false
      matrix:
        build-type: [Release]
    needs: [ openvino_download ]
    timeout-minutes: 20
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores-16gb
    container:
      image: openvinogithubactions.azurecr.io/ov_build/ubuntu_22_04_x64:${{ needs.openvino_download.outputs.docker_tag }}
      volumes:
        - /mount:/mount
      options: -e SCCACHE_AZURE_BLOB_CONTAINER -e SCCACHE_AZURE_CONNECTION_STRING -v ${{ github.workspace }}:${{ github.workspace }}
    env:
      CMAKE_GENERATOR: Unix Makefiles
      OV_INSTALL_DIR: ${{ github.workspace }}/ov
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_SAMPLES_DIR: ${{ github.workspace }}/samples
      BUILD_DIR: ${{ github.workspace }}/build
      SRC_DIR: ${{ github.workspace }}/src

    steps:
      - name: Clone openvino.genai
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.SRC_DIR }}
          submodules: recursive

      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.openvino_download.outputs.ov_artifact_name }}
          path: ${{ env.OV_INSTALL_DIR }}
          merge-multiple: true

      - name: CMake Build
        run: |    
          source ${{ env.OV_INSTALL_DIR }}/setupvars.sh
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -S ${{ env.SRC_DIR}} -B ${{ env.BUILD_DIR }}
          cmake --build ${{ env.BUILD_DIR}} --config ${{ matrix.build-type }} --parallel $(nproc)
          cmake --install ${{ env.BUILD_DIR }} --config ${{ matrix.build-type }} --prefix ${{ env.INSTALL_DIR }}
      
      - name: Pack Artifacts
        run: tar -cvf - * | pigz > ${{ env.BUILD_DIR }}/${{ env.GENAI_ARCHIVE_NAME }}
        working-directory: ${{ env.INSTALL_DIR }}
          
      - name: Smoke Tests
        run: |
          source ${{ env.OV_INSTALL_DIR }}/setupvars.sh
          python -m pip install numpy
          python -c "import numpy, openvino, openvino_genai; openvino_genai.TokenizedInputs(openvino.Tensor(numpy.empty(0)), openvino.Tensor(numpy.empty(0)))"
        env:
          PYTHONPATH: ${{ env.INSTALL_DIR }}/python/:${{ env.SRC_DIR }}/thirdparty/openvino_tokenizers/python/:$PYTHONPATH
          LD_LIBRARY_PATH: ${{ env.INSTALL_DIR }}/runtime/lib/intel64/:$LD_LIBRARY_PATH

      - name: Upload Archive Distribution Package
        if: ${{ always() }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: genai_archive_${{ matrix.build-type }}
          path: ${{ env.BUILD_DIR }}/${{ env.GENAI_ARCHIVE_NAME }}
          if-no-files-found: 'error'

  genai_build_wheel:
    name: Build Wheel
    needs: [ openvino_download ]
    timeout-minutes: 20
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores-16gb
    container:
      image: openvinogithubactions.azurecr.io/ov_build/ubuntu_22_04_x64:${{ needs.openvino_download.outputs.docker_tag }}
      volumes: 
        - /mount:/mount
        - ${{ github.workspace }}:${{ github.workspace }}
      options: -e SCCACHE_AZURE_BLOB_CONTAINER -e SCCACHE_AZURE_CONNECTION_STRING
    env:
      CMAKE_GENERATOR: Unix Makefiles
      OV_INSTALL_DIR: ${{ github.workspace }}/ov
      INSTALL_DIR: ${{ github.workspace }}/install
      WHEELS_DIR: ${{ github.workspace }}/install/wheels
      BUILD_DIR: ${{ github.workspace }}/build
      SRC_DIR: ${{ github.workspace }}/src

    steps:
      - name: Clone openvino.genai
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.SRC_DIR }}
          submodules: recursive

      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.openvino_download.outputs.ov_artifact_name }}
          path: ${{ env.OV_INSTALL_DIR }}
          merge-multiple: true
          
      - name: Build Tokenizers Wheel
        run: |
          python -m pip wheel -v --no-deps --wheel-dir ${{ env.WHEELS_DIR }} \
              --config-settings=override=cross.arch="manylinux_2_31_x86_64" \
              ${{ needs.openvino_download.outputs.ov_wheel_source }} \
              ${{ env.SRC_DIR }}/thirdparty/openvino_tokenizers
        working-directory: ${{ env.OV_INSTALL_DIR }}
              
      - name: Build GenAI Wheel
        run: |
          python -m pip wheel -v --no-deps --wheel-dir ${{ env.WHEELS_DIR }} \
              --config-settings=override=cross.arch="manylinux_2_31_x86_64" \
              ${{ needs.openvino_download.outputs.ov_wheel_source }} \
              ${{ env.SRC_DIR }}
        working-directory: ${{ env.OV_INSTALL_DIR }}
              
      - name: Install OpenVINO Wheel
        uses: ./src/.github/actions/install_wheel
        with:
          packages: "openvino"
          local_wheel_dir: ${{ env.OV_INSTALL_DIR }}/wheels
        
      - name: Install GenAI and Tokenizers Wheels
        uses: ./src/.github/actions/install_wheel
        with:
          packages: "openvino_tokenizers[transformers];openvino_genai"
          local_wheel_dir: ${{ env.WHEELS_DIR }}
          
      - name: Smoke Tests
        run: |
          python -m pip install "numpy<2.0.0"
          python -c "import numpy, openvino, openvino_genai; openvino_genai.TokenizedInputs(openvino.Tensor(numpy.empty(0)), openvino.Tensor(numpy.empty(0)))"

      - name: Upload Wheels
        if: ${{ always() }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: genai_wheels
          path: ${{ env.INSTALL_DIR }}
          if-no-files-found: 'error'
          
  genai_build_samples:
    name: Build Samples - ${{ matrix.build-type }}
    strategy:
      fail-fast: false
      matrix:
        build-type: [Release]
    needs: [ openvino_download, genai_build_cmake ]
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores-16gb
    container:
      image: openvinogithubactions.azurecr.io/ov_build/ubuntu_22_04_x64:${{ needs.openvino_download.outputs.docker_tag }}
      volumes: 
        - /mount:/mount
        - ${{ github.workspace }}:${{ github.workspace }}
      options: -e SCCACHE_AZURE_BLOB_CONTAINER -e SCCACHE_AZURE_CONNECTION_STRING
    env:
      CMAKE_GENERATOR: Unix Makefiles
      OV_INSTALL_DIR: ${{ github.workspace }}/ov
      INSTALL_DIR: ${{ github.workspace }}/install
      BUILD_DIR: ${{ github.workspace }}/build
      SRC_DIR: ${{ github.workspace }}/src

    steps:
      - name: Clone openvino.genai
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.SRC_DIR }}
          submodules: recursive

      - name: Download Build Artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: "{${{ needs.openvino_download.outputs.ov_artifact_name }},genai_archive_${{ matrix.build-type }}}"
          path: ${{ env.OV_INSTALL_DIR }}
          merge-multiple: true
          
      - name: Extract Artifacts
        run: pigz -dc ${{ env.GENAI_ARCHIVE_NAME }} | tar -xf - -C ${{ env.OV_INSTALL_DIR }}
        working-directory: ${{ env.OV_INSTALL_DIR }}
        
      - name: Build Samples (Release)
        if: ${{ 'Release' == matrix.build-type }}
        run: |
          chmod +x ${{ env.OV_INSTALL_DIR }}/samples/cpp/build_samples.sh
          ${{ env.OV_INSTALL_DIR }}/samples/cpp/build_samples.sh -i ${{ env.INSTALL_DIR }}
  
      - name: Build Samples (${{ matrix.build-type }})
        if: ${{ 'Release' != matrix.build-type }}
        run: |
          source ${{ env.OV_INSTALL_DIR }}/setupvars.sh
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -S ${{ env.OV_INSTALL_DIR }}/samples/cpp/ -B ${{ env.BUILD_DIR }}
          cmake --build ${{ env.BUILD_DIR }} --config ${{ matrix.build-type }} --parallel $(nproc)
          cmake --install ${{ env.BUILD_DIR }} --config ${{ matrix.build-type }} --component samples_bin --prefix ${{ env.INSTALL_DIR }}
        
      - name: Pack Artifacts
        run: tar -cvf - * | pigz > ${{ env.INSTALL_DIR }}/${{ env.GENAI_SAMPLES_NAME }}
        working-directory: ${{ env.INSTALL_DIR }}

      - name: Upload Samples Build Package
        if: ${{ always() }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: genai_samples_${{ matrix.build-type }}
          path: ${{ env.INSTALL_DIR }}/*.tar.gz
          if-no-files-found: 'error'
          
  genai_tests_archive:
    name: Test ${{ matrix.test.name }} (archive/${{ matrix.build-type }})
    needs: [ openvino_download, genai_build_cmake ]
    strategy:
      fail-fast: false
      matrix:
        build-type: [Release]
        test:
          - name: 'Chat Generate Api'
            cmd: 'tests/python_tests/test_chat_generate_api.py -k "not Qwen2-0.5B-Instruct"'
          - name: 'Whisper Generate API'
            cmd: 'tests/python_tests/test_whisper_generate_api.py -k "${PRECOMMIT_FILTER} and not distil-whisper"'
    timeout-minutes: 45
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores-16gb
    container:
      image: openvinogithubactions.azurecr.io/ov_test/ubuntu_22_04_x64:${{ needs.openvino_download.outputs.docker_tag }}
      volumes: 
        - /mount:/mount
        - ${{ github.workspace }}:${{ github.workspace }}

    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      PRECOMMIT_FILTER: 'test_language or timestamps'
        
    steps:
      - name: Clone openvino.genai
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.SRC_DIR }}
          submodules: recursive
          
      - name: Download Build Artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: "{${{ needs.openvino_download.outputs.ov_artifact_name }},genai_archive_${{ matrix.build-type }}}"
          path: ${{ env.INSTALL_DIR }}
          merge-multiple: true
      
      - name: Extract Artifacts
        run: pigz -dc ${{ env.GENAI_ARCHIVE_NAME }} | tar -xf - -C ${{ env.INSTALL_DIR }}
        working-directory: ${{ env.INSTALL_DIR }}
  
      - name: Install Test Requirements
        run: |
          python -m pip install -r ./tests/python_tests/requirements.txt
          python -m pip uninstall openvino openvino-tokenizers -y
        working-directory: ${{ env.SRC_DIR }}
    
      - name: Test - ${{ matrix.test.name }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          python -m pytest -vv ./${{ matrix.test.cmd }}
        env:
          PYTHONPATH: ${{ env.SRC_DIR }}/thirdparty/openvino_tokenizers/python/:$PYTHONPATH
        working-directory: ${{ env.SRC_DIR }}
        
  genai_tests_wheel:
    name: Test ${{ matrix.test.name }} (wheel/Release)
    needs: [ openvino_download, genai_build_wheel ]
    strategy:
      fail-fast: false
      matrix:
        test:
          - name: 'VLM API'
            cmd: 'tests/python_tests/test_vlm_api.py'
          - name: 'Whisper Generate API'
            cmd: 'tests/python_tests/test_whisper_generate_api.py -k "${PRECOMMIT_FILTER}"'
    timeout-minutes: 60
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores-16gb
    container:
      image: openvinogithubactions.azurecr.io/ov_test/ubuntu_22_04_x64:${{ needs.openvino_download.outputs.docker_tag }}
      volumes: 
        - /mount:/mount
        - ${{ github.workspace }}:${{ github.workspace }}

    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      PRECOMMIT_FILTER: 'not (test_language or timestamps)'
        
    steps:
      - name: Clone openvino.genai
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.SRC_DIR }}
          submodules: recursive
          
      - name: Download Build Artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: "{${{ needs.openvino_download.outputs.ov_artifact_name }},genai_wheels}"
          path: ${{ env.INSTALL_DIR }}
          merge-multiple: true
          
      - name: Install GenAI Wheels
        run: python -m pip install ${{ env.INSTALL_DIR }}/wheels/openvino_genai*.whl openvino-tokenizers[transformers] ${{ needs.openvino_download.outputs.ov_wheel_source }} --force-reinstall
        working-directory: ${{ env.INSTALL_DIR }} 
            
      - name: Install Test Requirements
        run: python -m pip install -r ./tests/python_tests/requirements.txt
        working-directory: ${{ env.SRC_DIR }}
    
      - name: Test - ${{ matrix.test.name }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          python -m pytest -vv ./${{ matrix.test.cmd }}
        working-directory: ${{ env.SRC_DIR }}
        
  genai_samples_tests:
    name: Samples Tests - ${{ matrix.build-type }}
    strategy:
      fail-fast: false
      matrix:
        build-type: [Release]
    needs: [ openvino_download, genai_build_cmake, genai_build_wheel, genai_build_samples ] 
    timeout-minutes: 45
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores-16gb
    container:
      image: openvinogithubactions.azurecr.io/ov_test/ubuntu_22_04_x64:${{ needs.openvino_download.outputs.docker_tag }}
      volumes: 
        - /mount:/mount
        - ${{ github.workspace }}:${{ github.workspace }}

    env:
      INSTALL_DIR: ${{ github.workspace }}/ov
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      MODELS_DIR: ${{ github.workspace }}/models
        
    steps:
      - name: Clone openvino.genai
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.SRC_DIR }}
          submodules: recursive
          
      - name: Download Build Artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: "{${{ needs.openvino_download.outputs.ov_artifact_name }},genai_archive_${{ matrix.build-type }},genai_samples_${{ matrix.build-type }},genai_wheels}"
          path: ${{ env.INSTALL_DIR }}
          merge-multiple: true
      
      - name: Extract Artifacts
        run: |
          pigz -dc ${{ env.GENAI_ARCHIVE_NAME }} | tar -xf - -C ${{ env.INSTALL_DIR }}
          pigz -dc ${{ env.GENAI_SAMPLES_NAME }} | tar -xf - -C ${{ env.INSTALL_DIR }}
        working-directory: ${{ env.INSTALL_DIR }}
        
      - name: Install GenAI Wheels
        run: python -m pip install ${{ env.INSTALL_DIR }}/wheels/openvino_genai*.whl openvino-tokenizers[transformers] ${{ needs.openvino_download.outputs.ov_wheel_source }} --force-reinstall
        working-directory: ${{ env.INSTALL_DIR }}
     
      - name: Install Samples Requirements
        run: python -m pip install -r ./samples/requirements.txt
        working-directory: ${{ env.SRC_DIR }}
     
      - name: Tests Prerequisites
        run: |
          mkdir -p ${{ env.MODELS_DIR }}
          optimum-cli export openvino --trust-remote-code --model TinyLlama/TinyLlama-1.1B-Chat-v1.0 ${{ env.MODELS_DIR }}/TinyLlama-1.1B-Chat-v1.0
          optimum-cli export openvino --trust-remote-code --model openai/whisper-tiny ${{ env.MODELS_DIR }}/whisper-tiny
          wget https://storage.openvinotoolkit.org/models_contrib/speech/2021.2/librispeech_s5/how_are_you_doing_today.wav -O ${{ env.MODELS_DIR }}/how_are_you_doing_today.wav
        
      - name: Test Python Sample (multinomial_causal_lm)
        if: ${{ 'Release' == matrix.build-type }} # Python bindings can be built in Release only
        timeout-minutes: 1
        run: ${{ env.INSTALL_DIR }}/samples/python/multinomial_causal_lm/multinomial_causal_lm.py ./TinyLlama-1.1B-Chat-v1.0/ 0
        working-directory: ${{ env.MODELS_DIR }}

      - name: Test Python Sample (whisper_speech_recognition)
        if: ${{ 'Release' == matrix.build-type }} # Python bindings can be built in Release only
        timeout-minutes: 1
        run: ${{ env.INSTALL_DIR }}/samples/python/whisper_speech_recognition/whisper_speech_recognition.py ./whisper-tiny/ how_are_you_doing_today.wav
        working-directory: ${{ env.MODELS_DIR }}
      
      - name: C++ Tests Prerequisites
        run: python -m pip uninstall openvino openvino-tokenizers openvino-genai -y
        
      - name: Test C++ Sample (greedy_causal_lm)
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_DIR }}/samples_bin/greedy_causal_lm ./TinyLlama-1.1B-Chat-v1.0/ ""
        working-directory: ${{ env.MODELS_DIR }}

      - name: Test C++ Sample (whisper_speech_recognition)
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_DIR }}/samples_bin/whisper_speech_recognition ./whisper-tiny/ how_are_you_doing_today.wav
        working-directory: ${{ env.MODELS_DIR }}

  Overall_Status:
    name: ci/gha_overall_status_linux
    needs: [openvino_download, genai_build_cmake, genai_build_wheel, genai_build_samples, genai_tests_archive, genai_tests_wheel, genai_samples_tests]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Check status of all jobs
        if: >-
          ${{
            contains(needs.*.result, 'failure') ||
            contains(needs.*.result, 'cancelled')
          }}
        run: exit 1
