name: Linux (Ubuntu 22.04, Python 3.11)
on:
  workflow_dispatch:
  pull_request:
  merge_group:
  push:
    branches:
      - master
      - 'releases/**'

permissions: read-all # Required by https://github.com/ossf/scorecard/blob/e23b8ad91fd6a64a0a971ca4fc0a4d1650725615/docs/checks.md#token-permissions

concurrency:
  # github.ref is not unique in post-commit
  group: ${{ github.event_name == 'push' && github.run_id || github.ref }}-linux
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  OV_BRANCH: ${{ github.base_ref || github.event.merge_group.base_ref || github.ref }}
  CMAKE_CXX_COMPILER_LAUNCHER: sccache
  CMAKE_C_COMPILER_LAUNCHER: sccache
  SCCACHE_IGNORE_SERVER_IO_ERROR: 1
  SCCACHE_SERVER_PORT: 35555
  SCCACHE_CACHE_SIZE: 30G
  SCCACHE_AZURE_KEY_PREFIX: genai/ubuntu/22_04/x64

jobs:
  openvino_download:
    name: Download prebuilt OpenVINO
    outputs:
      status: ${{ steps.openvino_download.outcome }}
      ov_wheel_source: ${{ steps.openvino_download.outputs.ov_wheel_source }}
      ov_version: ${{ steps.openvino_download.outputs.ov_version }}
      docker_tag: ${{ steps.get_docker_tag.outputs.docker_tag }}
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-2-cores-8gb-staging
    container:
      image: 'openvinogithubactions.azurecr.io/openvino_provider:0.1.0'
      volumes: [ "/mount:/mount" ]

    steps:
    - uses: openvinotoolkit/openvino/.github/actions/openvino_provider@master
      id: openvino_download
      with:
        platform: ubuntu22
        commit_packages_to_provide: wheels
        revision: latest_available_commit

    - name: Clone docker tag from OpenVINO repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: 'openvinotoolkit/openvino'
        path: 'openvino'
        ref: ${{ env.OV_BRANCH }}
        sparse-checkout: |
          .github/dockerfiles/docker_tag

    - name: Save docker tag to output
      id: get_docker_tag
      run: |
        docker_tag=$(cat openvino/.github/dockerfiles/docker_tag)
        echo "docker_tag=$docker_tag" >> $GITHUB_OUTPUT

  genai_build_cmake:
    name: Build GenAI Archive
    needs: [ openvino_download ]
    timeout-minutes: 120
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores-16gb-staging
    container:
      image: openvinogithubactions.azurecr.io/ov_build/ubuntu_22_04_x64:${{ needs.openvino_download.outputs.docker_tag }}
      volumes:
        - /mount:/mount
      options: -e SCCACHE_AZURE_BLOB_CONTAINER -e SCCACHE_AZURE_CONNECTION_STRING -v ${{ github.workspace }}:${{ github.workspace }}
    env:
      CMAKE_GENERATOR: Unix Makefiles
      OV_INSTALL_DIR: ${{ github.workspace }}/ov
      INSTALL_DIR: ${{ github.workspace }}/install
      BUILD_DIR: ${{ github.workspace }}/build
      SRC_DIR: ${{ github.workspace }}/src

    steps:
      - name: Clone openvino.genai
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.SRC_DIR }}
          submodules: recursive

      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.openvino_download.outputs.ov_artifact_name }}
          path: ${{ env.OV_INSTALL_DIR }}
          merge-multiple: true

      - name: CMake configure - GenAI
        run: |    
          source ${{ env.OV_INSTALL_DIR }}/setupvars.sh
          cmake -DCMAKE_BUILD_TYPE=Release -S ${{ env.SRC_DIR}} -B ${{ env.BUILD_DIR }}
      
      - name: Cmake build - GenAI
        run: cmake --build ${{ env.BUILD_DIR}} --config Release --parallel $(nproc)

      - name: Cmake install - GenAI
        run: cmake --install ${{ env.BUILD_DIR }} --config Release --prefix ${{ env.INSTALL_DIR }}
        
      - name: Install Test Requirements
        run: |
          python -m pip install -r ./tests/python_tests/requirements.txt --upgrade-strategy eager
          python -m pip uninstall openvino openvino-tokenizers -y
        working-directory: ${{ env.SRC_DIR }}
        
      - name: Smoke tests
        run: |
          source ${{ env.OV_INSTALL_DIR }}/setupvars.sh
          python -m pytest -v ./tests/python_tests/test_chat_generate_api.py::test_set_chat_template
          python -m pytest -v ./tests/python_tests/test_vlm_api.py
        env:
          PYTHONPATH: ${{ env.INSTALL_DIR }}/python/:${{ env.SRC_DIR }}/thirdparty/openvino_tokenizers/python/:$PYTHONPATH
          LD_LIBRARY_PATH: ${{ env.INSTALL_DIR }}/runtime/lib/intel64/:$LD_LIBRARY_PATH
        working-directory: ${{ env.SRC_DIR }}
        
      - name: Pack Artifacts
        run: tar -cvf - * | pigz > ${{ env.BUILD_DIR }}/genai.tar.gz
        working-directory: ${{ env.INSTALL_DIR }}

      - name: Upload OpenVINO GenAI package
        if: ${{ always() }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: genai_archive
          path: ${{ env.BUILD_DIR }}/*.tar.gz
          if-no-files-found: 'error'
  
  genai_build_wheel:
    name: Build GenAI Wheel
    needs: [ openvino_download ]
    timeout-minutes: 60
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores-16gb-staging
    container:
      image: openvinogithubactions.azurecr.io/ov_build/ubuntu_22_04_x64:${{ needs.openvino_download.outputs.docker_tag }}
      volumes:
        - /mount:/mount
      options: -e SCCACHE_AZURE_BLOB_CONTAINER -e SCCACHE_AZURE_CONNECTION_STRING -v ${{ github.workspace }}:${{ github.workspace }}
    env:
      CMAKE_GENERATOR: Unix Makefiles
      OV_INSTALL_DIR: ${{ github.workspace }}/ov
      INSTALL_DIR: ${{ github.workspace }}/install
      WHEELS_DIR: ${{ github.workspace }}/install/wheels
      BUILD_DIR: ${{ github.workspace }}/build
      SRC_DIR: ${{ github.workspace }}/src

    steps:
      - name: Clone openvino.genai
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.SRC_DIR }}
          submodules: recursive

      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.openvino_download.outputs.ov_artifact_name }}
          path: ${{ env.OV_INSTALL_DIR }}
          merge-multiple: true
          
      - name: Build tokenizers wheel
        run: |
          python -m pip wheel -v --no-deps --wheel-dir ${{ env.WHEELS_DIR }} \
              --config-settings=override=cross.arch="manylinux_2_31_x86_64" \
              ${{ needs.openvino_download.outputs.ov_wheel_source }} \
              ${{ env.SRC_DIR }}/thirdparty/openvino_tokenizers
        working-directory: ${{ env.OV_INSTALL_DIR }}
              
      - name: Build GenAI wheel
        run: |
          python -m pip wheel -v --no-deps --wheel-dir ${{ env.WHEELS_DIR }} \
              --config-settings=override=cross.arch="manylinux_2_31_x86_64" \
              ${{ needs.openvino_download.outputs.ov_wheel_source }} \
              ${{ env.SRC_DIR }}
        working-directory: ${{ env.OV_INSTALL_DIR }}
        
      - name: Install GenAI wheels
        run: python -m pip install ${{ env.WHEELS_DIR }}/openvino_genai*.whl ${{ env.WHEELS_DIR }}/openvino_tokenizers*.whl openvino-tokenizers[transformers] --force-reinstall
        env:
          PIP_FIND_LINKS: ${{ env.OV_INSTALL_DIR }}/wheels
        
      - name: Install Test Requirements
        run: python -m pip install -r ./tests/python_tests/requirements.txt --upgrade-strategy eager
        working-directory: ${{ env.SRC_DIR }}
        
      - name: Smoke tests
        run: |
          python -m pytest -v ./tests/python_tests/test_chat_generate_api.py::test_set_chat_template
          python -m pytest -v ./tests/python_tests/test_vlm_api.py
        working-directory: ${{ env.SRC_DIR }}

      - name: Upload wheels
        if: ${{ always() }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: genai_wheels
          path: ${{ env.INSTALL_DIR }}
          if-no-files-found: 'error'
          
  genai_build_samples:
    name: Build GenAI Samples
    needs: [ openvino_download, genai_build_cmake ]
    timeout-minutes: 120
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores-16gb-staging
    container:
      image: openvinogithubactions.azurecr.io/ov_build/ubuntu_22_04_x64:${{ needs.openvino_download.outputs.docker_tag }}
      volumes:
        - /mount:/mount
      options: -e SCCACHE_AZURE_BLOB_CONTAINER -e SCCACHE_AZURE_CONNECTION_STRING -v ${{ github.workspace }}:${{ github.workspace }}
    env:
      CMAKE_GENERATOR: Unix Makefiles
      OV_INSTALL_DIR: ${{ github.workspace }}/ov
      INSTALL_DIR: ${{ github.workspace }}/install
      BUILD_DIR: ${{ github.workspace }}/build
      SRC_DIR: ${{ github.workspace }}/src

    steps:
      - name: Clone openvino.genai
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.SRC_DIR }}
          submodules: recursive

      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.openvino_download.outputs.ov_artifact_name }}
          path: ${{ env.OV_INSTALL_DIR }}
          merge-multiple: true
          
      - name: Download GenAI package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: genai_archive
          merge-multiple: true
          
      - name: Extract Artifacts
        run: pigz -dc genai.tar.gz | tar -xf - -C ${{ env.OV_INSTALL_DIR }}
            
      - name: Build samples
        run: |
          chmod +x ${{ env.OV_INSTALL_DIR }}/samples/cpp/build_samples.sh
          ${{ env.OV_INSTALL_DIR }}/samples/cpp/build_samples.sh -i ${{ env.INSTALL_DIR }}
        
      - name: Pack Artifacts
        run: tar -cvf - * | pigz > ${{ env.INSTALL_DIR }}/genai_samples.tar.gz
        working-directory: ${{ env.INSTALL_DIR }}

      - name: Upload OpenVINO GenAI package
        if: ${{ always() }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: genai_samples
          path: ${{ env.INSTALL_DIR }}/*.tar.gz
          if-no-files-found: 'error'
          
  genai_tests_archive:
    name: GenAI Python Tests API (${{ matrix.TEST_NAME }})
    needs: [ openvino_download, genai_build_cmake ]
    strategy:
      matrix:
        include:
          - TEST_NAME: 'Whisper Generate API'
            TEST_COMMAND: 'tests/python_tests/test_whisper_generate_api.py -k test_smoke'
    timeout-minutes: 45
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-2-cores-8gb-staging
    container:
      image: openvinogithubactions.azurecr.io/ov_test/ubuntu_22_04_x64:${{ needs.openvino_download.outputs.docker_tag }}
      volumes:
        - /mount:/mount
      options: -v ${{ github.workspace }}:${{ github.workspace }}

    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
        
    steps:
      - name: Clone openvino.genai
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.SRC_DIR }}
          submodules: recursive
          
      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.openvino_download.outputs.ov_artifact_name }}
          path: ${{ env.INSTALL_DIR }}
          merge-multiple: true

      - name: Download GenAI package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: genai_archive
          merge-multiple: true
      
      - name: Extract Artifacts
        run: pigz -dc genai.tar.gz | tar -xf - -C ${{ env.INSTALL_DIR }}
  
      - name: Install Test Requirements
        run: |
          python -m pip install -r ./tests/python_tests/requirements.txt --upgrade-strategy eager
          python -m pip uninstall openvino openvino-tokenizers -y
        working-directory: ${{ env.SRC_DIR }}
    
      - name: Test - ${{ matrix.TEST_NAME }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          python -m pytest -v ./${{ matrix.TEST_COMMAND }}
        env:
          PYTHONPATH: ${{ env.SRC_DIR }}/thirdparty/openvino_tokenizers/python/:$PYTHONPATH
        working-directory: ${{ env.SRC_DIR }}
        
  genai_tests_wheel:
    name: GenAI Tests (${{ matrix.TEST_NAME }})
    needs: [ openvino_download, genai_build_wheel ]
    strategy:
      matrix:
        include:
          - TEST_NAME: 'Whisper Generate API'
            TEST_COMMAND: 'tests/python_tests/test_whisper_generate_api.py -k "not test_smoke"'
    timeout-minutes: 45
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-2-cores-8gb-staging
    container:
      image: openvinogithubactions.azurecr.io/ov_test/ubuntu_22_04_x64:${{ needs.openvino_download.outputs.docker_tag }}
      volumes:
        - /mount:/mount
      options: -v ${{ github.workspace }}:${{ github.workspace }}

    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
        
    steps:
      - name: Clone openvino.genai
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.SRC_DIR }}
          submodules: recursive
          
      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.openvino_download.outputs.ov_artifact_name }}
          path: ${{ env.INSTALL_DIR }}
          merge-multiple: true

      - name: Download GenAI wheels
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: genai_wheels
          path: ${{ env.INSTALL_DIR }}
          merge-multiple: true
          
      - name: Install GenAI wheels
        run: python -m pip install ${{ env.INSTALL_DIR }}/wheels/openvino_genai*.whl openvino-tokenizers[transformers] --force-reinstall
        env:
          PIP_FIND_LINKS: ${{ env.INSTALL_DIR }}/wheels
            
      - name: Install Test Requirements
        run: python -m pip install -r ./tests/python_tests/requirements.txt --upgrade-strategy eager
        working-directory: ${{ env.SRC_DIR }}
    
      - name: Test - ${{ matrix.TEST_NAME }}
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          python -m pytest -v ./${{ matrix.TEST_COMMAND }}
        working-directory: ${{ env.SRC_DIR }}
        
  genai_samples_tests:
    name: GenAI Samples Tests
    needs: [ openvino_download, genai_build_samples, genai_build_wheel ] 
    timeout-minutes: 45
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-2-cores-8gb-staging
    container:
      image: openvinogithubactions.azurecr.io/ov_test/ubuntu_22_04_x64:${{ needs.openvino_download.outputs.docker_tag }}
      volumes:
        - /mount:/mount
      options: -v ${{ github.workspace }}:${{ github.workspace }}

    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      MODELS_DIR: ${{ github.workspace }}/models
        
    steps:
      - name: Clone openvino.genai
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.SRC_DIR }}
          submodules: recursive
          
      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.openvino_download.outputs.ov_artifact_name }}
          path: ${{ env.INSTALL_DIR }}
          merge-multiple: true

      - name: Download GenAI wheels
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: genai[|_wheels|_samples]*
          path: ${{ env.INSTALL_DIR }}
          merge-multiple: true
      
      - name: Extract Artifacts
        run: |
          pigz -dc genai.tar.gz | tar -xf - -C ${{ env.INSTALL_DIR }}
          pigz -dc genai_samples.tar.gz | tar -xf - -C ${{ env.INSTALL_DIR }}
        working-directory: ${{ env.INSTALL_DIR }}
     
      - name: Install Test Requirements
        run: python -m pip install -r ./samples/requirements.txt --upgrade-strategy eager
        working-directory: ${{ env.SRC_DIR }}
     
      - name: Tests Prerequisites
        run: |
          mkdir -p ${{ env.MODELS_DIR }}
          optimum-cli export openvino --trust-remote-code --model TinyLlama/TinyLlama-1.1B-Chat-v1.0 ${{ env.MODELS_DIR }}/TinyLlama-1.1B-Chat-v1.0
          optimum-cli export openvino --trust-remote-code --model openai/whisper-tiny ${{ env.MODELS_DIR }}/whisper-tiny
          wget https://storage.openvinotoolkit.org/models_contrib/speech/2021.2/librispeech_s5/how_are_you_doing_today.wav -O ${{ env.MODELS_DIR }}/how_are_you_doing_today.wav
        
      - name: Test Python Sample (multinomial_causal_lm)
        timeout-minutes: 1
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_DIR }}/samples/python/multinomial_causal_lm/multinomial_causal_lm.py ./TinyLlama-1.1B-Chat-v1.0/ 0
        working-directory: ${{ env.MODELS_DIR }}

      - name: Test Python Sample (whisper_speech_recognition)
        timeout-minutes: 1
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_DIR }}/samples/python/whisper_speech_recognition/whisper_speech_recognition.py ./whisper-tiny/ how_are_you_doing_today.wav
        working-directory: ${{ env.MODELS_DIR }}
      
      - name: C++ Tests Prerequisites
        run: python -m pip uninstall openvino openvino-tokenizers openvino-genai -y
        
      - name: Test C++ Sample (greedy_causal_lm)
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_DIR }}/samples_bin/greedy_causal_lm ./TinyLlama-1.1B-Chat-v1.0/ ""
        working-directory: ${{ env.MODELS_DIR }}

      - name: Test C++ samples (whisper_speech_recognition)
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
           ${{ env.INSTALL_DIR }}/samples_bin/whisper_speech_recognition ./whisper-tiny/ how_are_you_doing_today.wav
        working-directory: ${{ env.MODELS_DIR }}

  Overall_Status:
    name: ci/gha_overall_status_linux
    needs: [openvino_download, genai_build_cmake, genai_build_wheel, genai_build_samples, genai_tests_archive, genai_tests_wheel, genai_samples_tests]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Check status of all jobs
        if: >-
          ${{
            contains(needs.*.result, 'failure') ||
            contains(needs.*.result, 'cancelled')
          }}
        run: exit 1
